#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  $Id$
#
# Lars J|rgen Solberg <larsjsol@sh.titan.uio.no> 2012
#
import re
import log, purify
from mwlib import advtree


dirty_sections = ('^see also$',
                  '^notes.*',
                  '^references.*',
                  '^sources.*')

#these cause the rest of the article to be removed
purge_sections = ('^related web sites',
                  '^external links',
                  '^bibliography',
                  '^footnotes')


def classify(pure_sections):
    """takes a list of purifier.PureSections and returns two lists, clean and dirty"""
    

    seen = dict([p for p in zip(dirty_sections, [0] * len(dirty_sections))])
    dirty_mem = 3 #cc will only remove the last dirty section, but does not try keep track of more than 3


    for s in pure_sections:
        title = s.title.strip().lower()
        s.state = 'c'
        for d in purge_sections:
            if re.search(d, title, flags=re.U):
                s.state = 'p'
        for d in dirty_sections:
            if re.search(d, title, flags=re.U):
                s.state = 'd'
                s.dirty_reg = d
                seen[d] += 1
                s.dirty_no = seen[d]

    clean = []
    dirty = []
    for i in range(0, len(pure_sections)):
        if pure_sections[i].state == 'd':
            if pure_sections[i].dirty_no < min(dirty_mem + 1, seen[pure_sections[i].dirty_reg]):
                clean.append(pure_sections[i])
            else:
            #dirty.append(pure_sections[i])
                dirty.extend(pure_sections[i:])
                break
        elif pure_sections[i].state == 'c':
            clean.append(pure_sections[i])
        else: #sections[i].state == 'p'
            dirty.extend(pure_sections[i:])
            break

    return clean,dirty
            

sent_id = re.compile(r'^\[\d+\] \|')
article = re.compile(r'<article>(.*)</article>')
_heading = re.compile(r'(={1,6})([^=]*?)\1') # a bit sloppy, but there are no html-style headings in wescience
def printable_text(purifier, string):
    """strips the markup and sentence identifier from a single
     line in corpus generated by Corpus Clean"""
    raw = sent_id.sub('', string)
    if article.search(string):
        return article.sub(r'\1', raw).strip()

    text = ''
    result = purifier.purify_string(string=raw)
    if result:
        result = result[-1]
        text = result.content.strip()
    
    
    #text = result[-1].tree.getAllDisplayText(amap).strip()
    #text = result.content.strip()
    if len(text) == 0:
        text = result.title.strip()
    if '__no_name__' in text: #this happens if there were no printable text in string
        log.logger.info("no printable text in: " + string.strip())
        return ''
    else:
        return text.replace('\n', '')


def heading(purifier, string):
    """returns the first heading in string or the empty string if there are none"""
    raw = sent_id.sub('', string)
    if article.search(string):
        return article.sub(r'\1', raw).strip()

    text = ''

    result = purifier.purify_string(string=raw)
    if result:
        result = result[-1]
        text = result.title.strip()
    if text == "__no_name__":
        return ''
    else:
        return text
    
